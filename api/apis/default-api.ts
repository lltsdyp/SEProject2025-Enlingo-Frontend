// tslint:disable
/**
 * Vilingo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ChapterInfoResponse } from '../models';
// @ts-ignore
import { ExerciseInfoResponse } from '../models';
// @ts-ignore
import { LessonInfoResponse } from '../models';
// @ts-ignore
import { RecommendVideoFetchResponse } from '../models';
// @ts-ignore
import { SectionListResponse } from '../models';
// @ts-ignore
import { WordlistFetchInfoResponse } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取段落信息
         * @param {number} id 要获取的段落的id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentChapterGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling contentChapterGet.');
            }
            const localVarPath = `/content/chapter`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search=null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取练习信息
         * @param {number} id 练习的id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentExerciseGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling contentExerciseGet.');
            }
            const localVarPath = `/content/exercise`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search=null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取课程信息
         * @param {number} id 课程id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentLessonGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling contentLessonGet.');
            }
            const localVarPath = `/content/lesson`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search=null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取给定语言的所有章节的列表
         * @summary 获取章节列表
         * @param {string} lang 指定语言参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentSectionsGet: async (lang: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lang' is not null or undefined
            if (lang === null || lang === undefined) {
                throw new RequiredError('lang','Required parameter lang was null or undefined when calling contentSectionsGet.');
            }
            const localVarPath = `/content/sections`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search=null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获得推荐视频
         * @param {number} limit 限制此次请求返回的最大视频数量
         * @param {number} [before] 指向最后一条记录的游标
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recommendGetGet: async (limit: number, before?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling recommendGetGet.');
            }
            const localVarPath = `/recommend/get`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search=null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 添加一个单词到用户的生词本中
         * @summary 创建生词条目
         * @param {string} word 需要添加到单词本中的单词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistAddPost: async (word: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'word' is not null or undefined
            if (word === null || word === undefined) {
                throw new RequiredError('word','Required parameter word was null or undefined when calling wordlistAddPost.');
            }
            const localVarPath = `/wordlist/add`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (word !== undefined) {
                localVarQueryParameter['word'] = word;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search=null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 从用户的生词本中删除一个条目
         * @summary 删除生词条目
         * @param {string} word 要删除的单词名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistDeletePost: async (word: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'word' is not null or undefined
            if (word === null || word === undefined) {
                throw new RequiredError('word','Required parameter word was null or undefined when calling wordlistDeletePost.');
            }
            const localVarPath = `/wordlist/delete`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (word !== undefined) {
                localVarQueryParameter['word'] = word;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search=null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取生词列表，具体提供单词的顺序由后端确定
         * @summary 获取生词表
         * @param {number} limit 限制最大获取的生词数量
         * @param {string} [before] 获取的最后一个生词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistGetGet: async (limit: number, before?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling wordlistGetGet.');
            }
            const localVarPath = `/wordlist/get`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search=null;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取段落信息
         * @param {number} id 要获取的段落的id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentChapterGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChapterInfoResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).contentChapterGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取练习信息
         * @param {number} id 练习的id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentExerciseGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExerciseInfoResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).contentExerciseGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取课程信息
         * @param {number} id 课程id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentLessonGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LessonInfoResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).contentLessonGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 获取给定语言的所有章节的列表
         * @summary 获取章节列表
         * @param {string} lang 指定语言参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentSectionsGet(lang: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectionListResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).contentSectionsGet(lang, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获得推荐视频
         * @param {number} limit 限制此次请求返回的最大视频数量
         * @param {number} [before] 指向最后一条记录的游标
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recommendGetGet(limit: number, before?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecommendVideoFetchResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).recommendGetGet(limit, before, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 添加一个单词到用户的生词本中
         * @summary 创建生词条目
         * @param {string} word 需要添加到单词本中的单词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordlistAddPost(word: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).wordlistAddPost(word, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 从用户的生词本中删除一个条目
         * @summary 删除生词条目
         * @param {string} word 要删除的单词名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordlistDeletePost(word: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).wordlistDeletePost(word, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 获取生词列表，具体提供单词的顺序由后端确定
         * @summary 获取生词表
         * @param {number} limit 限制最大获取的生词数量
         * @param {string} [before] 获取的最后一个生词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordlistGetGet(limit: number, before?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WordlistFetchInfoResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).wordlistGetGet(limit, before, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary 获取段落信息
         * @param {number} id 要获取的段落的id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentChapterGet(id: number, options?: any): AxiosPromise<ChapterInfoResponse> {
            return DefaultApiFp(configuration).contentChapterGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取练习信息
         * @param {number} id 练习的id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentExerciseGet(id: number, options?: any): AxiosPromise<ExerciseInfoResponse> {
            return DefaultApiFp(configuration).contentExerciseGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取课程信息
         * @param {number} id 课程id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentLessonGet(id: number, options?: any): AxiosPromise<LessonInfoResponse> {
            return DefaultApiFp(configuration).contentLessonGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取给定语言的所有章节的列表
         * @summary 获取章节列表
         * @param {string} lang 指定语言参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentSectionsGet(lang: string, options?: any): AxiosPromise<SectionListResponse> {
            return DefaultApiFp(configuration).contentSectionsGet(lang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获得推荐视频
         * @param {number} limit 限制此次请求返回的最大视频数量
         * @param {number} [before] 指向最后一条记录的游标
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recommendGetGet(limit: number, before?: number, options?: any): AxiosPromise<RecommendVideoFetchResponse> {
            return DefaultApiFp(configuration).recommendGetGet(limit, before, options).then((request) => request(axios, basePath));
        },
        /**
         * 添加一个单词到用户的生词本中
         * @summary 创建生词条目
         * @param {string} word 需要添加到单词本中的单词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistAddPost(word: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).wordlistAddPost(word, options).then((request) => request(axios, basePath));
        },
        /**
         * 从用户的生词本中删除一个条目
         * @summary 删除生词条目
         * @param {string} word 要删除的单词名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistDeletePost(word: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).wordlistDeletePost(word, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取生词列表，具体提供单词的顺序由后端确定
         * @summary 获取生词表
         * @param {number} limit 限制最大获取的生词数量
         * @param {string} [before] 获取的最后一个生词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistGetGet(limit: number, before?: string, options?: any): AxiosPromise<WordlistFetchInfoResponse> {
            return DefaultApiFp(configuration).wordlistGetGet(limit, before, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 获取段落信息
     * @param {number} id 要获取的段落的id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentChapterGet(id: number, options?: any) {
        return DefaultApiFp(this.configuration).contentChapterGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取练习信息
     * @param {number} id 练习的id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentExerciseGet(id: number, options?: any) {
        return DefaultApiFp(this.configuration).contentExerciseGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取课程信息
     * @param {number} id 课程id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentLessonGet(id: number, options?: any) {
        return DefaultApiFp(this.configuration).contentLessonGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取给定语言的所有章节的列表
     * @summary 获取章节列表
     * @param {string} lang 指定语言参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentSectionsGet(lang: string, options?: any) {
        return DefaultApiFp(this.configuration).contentSectionsGet(lang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获得推荐视频
     * @param {number} limit 限制此次请求返回的最大视频数量
     * @param {number} [before] 指向最后一条记录的游标
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public recommendGetGet(limit: number, before?: number, options?: any) {
        return DefaultApiFp(this.configuration).recommendGetGet(limit, before, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 添加一个单词到用户的生词本中
     * @summary 创建生词条目
     * @param {string} word 需要添加到单词本中的单词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public wordlistAddPost(word: string, options?: any) {
        return DefaultApiFp(this.configuration).wordlistAddPost(word, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 从用户的生词本中删除一个条目
     * @summary 删除生词条目
     * @param {string} word 要删除的单词名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public wordlistDeletePost(word: string, options?: any) {
        return DefaultApiFp(this.configuration).wordlistDeletePost(word, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取生词列表，具体提供单词的顺序由后端确定
     * @summary 获取生词表
     * @param {number} limit 限制最大获取的生词数量
     * @param {string} [before] 获取的最后一个生词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public wordlistGetGet(limit: number, before?: string, options?: any) {
        return DefaultApiFp(this.configuration).wordlistGetGet(limit, before, options).then((request) => request(this.axios, this.basePath));
    }

}
