// tslint:disable
/**
 * Vilingo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ChapterInfoResponse } from '../models';
// @ts-ignore
import { ExerciseInfoResponse } from '../models';
// @ts-ignore
import { InlineResponse200 } from '../models';
// @ts-ignore
import { InlineResponse2001 } from '../models';
// @ts-ignore
import { LessonInfoResponse } from '../models';
// @ts-ignore
import { RecommendVideoFetchResponse } from '../models';
// @ts-ignore
import { SectionListResponse } from '../models';
// @ts-ignore
import { WordlistFetchInfoResponse } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 上传一个包含英文摘要的文本文件和一个用户的录音文件，以启动一个异步的AI分析流程。服务器会立即返回一个用于查询结果的 job_id。
         * @summary 启动分析任务
         * @param {any} [summaryTxtFile] 一个 .txt 格式的文本文件，内容为待对比的英文摘要。
         * @param {any} [userAudio] 用户的录音文件，支持 .mp3, .wav, .m4a 等主流音频格式。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnalyzePost: async (summaryTxtFile?: any, userAudio?: any, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/analyze`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (summaryTxtFile !== undefined) { 
                localVarFormParams.append('summary_txt_file', summaryTxtFile as any);
            }
    
            if (userAudio !== undefined) { 
                localVarFormParams.append('user_audio', userAudio as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search='';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 使用从“启动分析任务”接口获取的 job_id，轮询此接口以获取任务的当前状态或最终的分析结果。
         * @summary 查询任务结果
         * @param {string} jobId 使用从“启动分析任务”接口获取的 job_id，轮询此接口以获取任务的当前状态或最终的分析结果。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultsJobIdGet: async (jobId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            if (jobId === null || jobId === undefined) {
                throw new RequiredError('jobId','Required parameter jobId was null or undefined when calling apiV1ResultsJobIdGet.');
            }
            const localVarPath = `/api/v1/results/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search='';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取段落信息
         * @param {number} id 要获取的段落的id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentChapterGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling contentChapterGet.');
            }
            const localVarPath = `/content/chapter`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search='';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取练习信息
         * @param {number} id 练习的id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentExerciseGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling contentExerciseGet.');
            }
            const localVarPath = `/content/exercise`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search='';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取课程信息
         * @param {number} id 课程id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentLessonGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling contentLessonGet.');
            }
            const localVarPath = `/content/lesson`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search='';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取给定语言的所有章节的列表
         * @summary 获取章节列表
         * @param {string} lang 指定语言参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentSectionsGet: async (lang: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lang' is not null or undefined
            if (lang === null || lang === undefined) {
                throw new RequiredError('lang','Required parameter lang was null or undefined when calling contentSectionsGet.');
            }
            const localVarPath = `/content/sections`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search='';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获得推荐视频
         * @param {number} limit 限制此次请求返回的最大视频数量
         * @param {number} [id] 指定一次fetch的id
         * @param {number} [before] 指向最后一条记录的游标
         * @param {string} [status] 学习进度，格式\&quot;section-chapter-lesson-exercise\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recommendGetGet: async (limit: number, id?: number, before?: number, status?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling recommendGetGet.');
            }
            const localVarPath = `/recommend/get`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search='';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 添加一个单词到用户的生词本中
         * @summary 创建生词条目
         * @param {string} word 需要添加到单词本中的单词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistAddPost: async (word: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'word' is not null or undefined
            if (word === null || word === undefined) {
                throw new RequiredError('word','Required parameter word was null or undefined when calling wordlistAddPost.');
            }
            const localVarPath = `/wordlist/add`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (word !== undefined) {
                localVarQueryParameter['word'] = word;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search='';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 从用户的生词本中删除一个条目
         * @summary 删除生词条目
         * @param {string} word 要删除的单词名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistDeletePost: async (word: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'word' is not null or undefined
            if (word === null || word === undefined) {
                throw new RequiredError('word','Required parameter word was null or undefined when calling wordlistDeletePost.');
            }
            const localVarPath = `/wordlist/delete`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (word !== undefined) {
                localVarQueryParameter['word'] = word;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search='';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取生词列表，具体提供单词的顺序由后端确定
         * @summary 获取生词表
         * @param {number} limit 限制最大获取的生词数量
         * @param {string} [before] 获取的最后一个生词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistGetGet: async (limit: number, before?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling wordlistGetGet.');
            }
            const localVarPath = `/wordlist/get`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search='';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 从陌生的单词表中获取任四个不重复的随机单词
         * @summary 获取四个随机单词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistRandomwordGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/wordlist/randomword`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search='';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取单词翻译
         * @param {string} [name] 名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistTranslateGet: async (name?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/wordlist/translate`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search='';
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 上传一个包含英文摘要的文本文件和一个用户的录音文件，以启动一个异步的AI分析流程。服务器会立即返回一个用于查询结果的 job_id。
         * @summary 启动分析任务
         * @param {any} [summaryTxtFile] 一个 .txt 格式的文本文件，内容为待对比的英文摘要。
         * @param {any} [userAudio] 用户的录音文件，支持 .mp3, .wav, .m4a 等主流音频格式。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AnalyzePost(summaryTxtFile?: any, userAudio?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiV1AnalyzePost(summaryTxtFile, userAudio, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 使用从“启动分析任务”接口获取的 job_id，轮询此接口以获取任务的当前状态或最终的分析结果。
         * @summary 查询任务结果
         * @param {string} jobId 使用从“启动分析任务”接口获取的 job_id，轮询此接口以获取任务的当前状态或最终的分析结果。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ResultsJobIdGet(jobId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiV1ResultsJobIdGet(jobId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取段落信息
         * @param {number} id 要获取的段落的id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentChapterGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChapterInfoResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).contentChapterGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取练习信息
         * @param {number} id 练习的id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentExerciseGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExerciseInfoResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).contentExerciseGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取课程信息
         * @param {number} id 课程id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentLessonGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LessonInfoResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).contentLessonGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 获取给定语言的所有章节的列表
         * @summary 获取章节列表
         * @param {string} lang 指定语言参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentSectionsGet(lang: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectionListResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).contentSectionsGet(lang, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获得推荐视频
         * @param {number} limit 限制此次请求返回的最大视频数量
         * @param {number} [id] 指定一次fetch的id
         * @param {number} [before] 指向最后一条记录的游标
         * @param {string} [status] 学习进度，格式\&quot;section-chapter-lesson-exercise\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recommendGetGet(limit: number, id?: number, before?: number, status?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecommendVideoFetchResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).recommendGetGet(limit, id, before, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 添加一个单词到用户的生词本中
         * @summary 创建生词条目
         * @param {string} word 需要添加到单词本中的单词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordlistAddPost(word: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).wordlistAddPost(word, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 从用户的生词本中删除一个条目
         * @summary 删除生词条目
         * @param {string} word 要删除的单词名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordlistDeletePost(word: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).wordlistDeletePost(word, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 获取生词列表，具体提供单词的顺序由后端确定
         * @summary 获取生词表
         * @param {number} limit 限制最大获取的生词数量
         * @param {string} [before] 获取的最后一个生词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordlistGetGet(limit: number, before?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WordlistFetchInfoResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).wordlistGetGet(limit, before, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 从陌生的单词表中获取任四个不重复的随机单词
         * @summary 获取四个随机单词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordlistRandomwordGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).wordlistRandomwordGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 获取单词翻译
         * @param {string} [name] 名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordlistTranslateGet(name?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).wordlistTranslateGet(name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 上传一个包含英文摘要的文本文件和一个用户的录音文件，以启动一个异步的AI分析流程。服务器会立即返回一个用于查询结果的 job_id。
         * @summary 启动分析任务
         * @param {any} [summaryTxtFile] 一个 .txt 格式的文本文件，内容为待对比的英文摘要。
         * @param {any} [userAudio] 用户的录音文件，支持 .mp3, .wav, .m4a 等主流音频格式。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AnalyzePost(summaryTxtFile?: any, userAudio?: any, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).apiV1AnalyzePost(summaryTxtFile, userAudio, options).then((request) => request(axios, basePath));
        },
        /**
         * 使用从“启动分析任务”接口获取的 job_id，轮询此接口以获取任务的当前状态或最终的分析结果。
         * @summary 查询任务结果
         * @param {string} jobId 使用从“启动分析任务”接口获取的 job_id，轮询此接口以获取任务的当前状态或最终的分析结果。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ResultsJobIdGet(jobId: string, options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).apiV1ResultsJobIdGet(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取段落信息
         * @param {number} id 要获取的段落的id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentChapterGet(id: number, options?: any): AxiosPromise<ChapterInfoResponse> {
            return DefaultApiFp(configuration).contentChapterGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取练习信息
         * @param {number} id 练习的id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentExerciseGet(id: number, options?: any): AxiosPromise<ExerciseInfoResponse> {
            return DefaultApiFp(configuration).contentExerciseGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取课程信息
         * @param {number} id 课程id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentLessonGet(id: number, options?: any): AxiosPromise<LessonInfoResponse> {
            return DefaultApiFp(configuration).contentLessonGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取给定语言的所有章节的列表
         * @summary 获取章节列表
         * @param {string} lang 指定语言参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentSectionsGet(lang: string, options?: any): AxiosPromise<SectionListResponse> {
            return DefaultApiFp(configuration).contentSectionsGet(lang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获得推荐视频
         * @param {number} limit 限制此次请求返回的最大视频数量
         * @param {number} [id] 指定一次fetch的id
         * @param {number} [before] 指向最后一条记录的游标
         * @param {string} [status] 学习进度，格式\&quot;section-chapter-lesson-exercise\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recommendGetGet(limit: number, id?: number, before?: number, status?: string, options?: any): AxiosPromise<RecommendVideoFetchResponse> {
            return DefaultApiFp(configuration).recommendGetGet(limit, id, before, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 添加一个单词到用户的生词本中
         * @summary 创建生词条目
         * @param {string} word 需要添加到单词本中的单词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistAddPost(word: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).wordlistAddPost(word, options).then((request) => request(axios, basePath));
        },
        /**
         * 从用户的生词本中删除一个条目
         * @summary 删除生词条目
         * @param {string} word 要删除的单词名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistDeletePost(word: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).wordlistDeletePost(word, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取生词列表，具体提供单词的顺序由后端确定
         * @summary 获取生词表
         * @param {number} limit 限制最大获取的生词数量
         * @param {string} [before] 获取的最后一个生词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistGetGet(limit: number, before?: string, options?: any): AxiosPromise<WordlistFetchInfoResponse> {
            return DefaultApiFp(configuration).wordlistGetGet(limit, before, options).then((request) => request(axios, basePath));
        },
        /**
         * 从陌生的单词表中获取任四个不重复的随机单词
         * @summary 获取四个随机单词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistRandomwordGet(options?: any): AxiosPromise<InlineResponse2001> {
            return DefaultApiFp(configuration).wordlistRandomwordGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取单词翻译
         * @param {string} [name] 名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistTranslateGet(name?: string, options?: any): AxiosPromise<InlineResponse200> {
            return DefaultApiFp(configuration).wordlistTranslateGet(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 上传一个包含英文摘要的文本文件和一个用户的录音文件，以启动一个异步的AI分析流程。服务器会立即返回一个用于查询结果的 job_id。
     * @summary 启动分析任务
     * @param {any} [summaryTxtFile] 一个 .txt 格式的文本文件，内容为待对比的英文摘要。
     * @param {any} [userAudio] 用户的录音文件，支持 .mp3, .wav, .m4a 等主流音频格式。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AnalyzePost(summaryTxtFile?: any, userAudio?: any, options?: any) {
        return DefaultApiFp(this.configuration).apiV1AnalyzePost(summaryTxtFile, userAudio, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 使用从“启动分析任务”接口获取的 job_id，轮询此接口以获取任务的当前状态或最终的分析结果。
     * @summary 查询任务结果
     * @param {string} jobId 使用从“启动分析任务”接口获取的 job_id，轮询此接口以获取任务的当前状态或最终的分析结果。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ResultsJobIdGet(jobId: string, options?: any) {
        return DefaultApiFp(this.configuration).apiV1ResultsJobIdGet(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取段落信息
     * @param {number} id 要获取的段落的id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentChapterGet(id: number, options?: any) {
        return DefaultApiFp(this.configuration).contentChapterGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取练习信息
     * @param {number} id 练习的id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentExerciseGet(id: number, options?: any) {
        return DefaultApiFp(this.configuration).contentExerciseGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取课程信息
     * @param {number} id 课程id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentLessonGet(id: number, options?: any) {
        return DefaultApiFp(this.configuration).contentLessonGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取给定语言的所有章节的列表
     * @summary 获取章节列表
     * @param {string} lang 指定语言参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentSectionsGet(lang: string, options?: any) {
        return DefaultApiFp(this.configuration).contentSectionsGet(lang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获得推荐视频
     * @param {number} limit 限制此次请求返回的最大视频数量
     * @param {number} [id] 指定一次fetch的id
     * @param {number} [before] 指向最后一条记录的游标
     * @param {string} [status] 学习进度，格式\&quot;section-chapter-lesson-exercise\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public recommendGetGet(limit: number, id?: number, before?: number, status?: string, options?: any) {
        return DefaultApiFp(this.configuration).recommendGetGet(limit, id, before, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 添加一个单词到用户的生词本中
     * @summary 创建生词条目
     * @param {string} word 需要添加到单词本中的单词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public wordlistAddPost(word: string, options?: any) {
        return DefaultApiFp(this.configuration).wordlistAddPost(word, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 从用户的生词本中删除一个条目
     * @summary 删除生词条目
     * @param {string} word 要删除的单词名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public wordlistDeletePost(word: string, options?: any) {
        return DefaultApiFp(this.configuration).wordlistDeletePost(word, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取生词列表，具体提供单词的顺序由后端确定
     * @summary 获取生词表
     * @param {number} limit 限制最大获取的生词数量
     * @param {string} [before] 获取的最后一个生词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public wordlistGetGet(limit: number, before?: string, options?: any) {
        return DefaultApiFp(this.configuration).wordlistGetGet(limit, before, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 从陌生的单词表中获取任四个不重复的随机单词
     * @summary 获取四个随机单词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public wordlistRandomwordGet(options?: any) {
        return DefaultApiFp(this.configuration).wordlistRandomwordGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取单词翻译
     * @param {string} [name] 名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public wordlistTranslateGet(name?: string, options?: any) {
        return DefaultApiFp(this.configuration).wordlistTranslateGet(name, options).then((request) => request(this.axios, this.basePath));
    }

}
