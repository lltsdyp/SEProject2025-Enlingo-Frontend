/* tslint:disable */
/* eslint-disable */
/**
 * Vilingo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ChapterInfoResponse } from '../models';
// @ts-ignore
import type { ExerciseInfoResponse } from '../models';
// @ts-ignore
import type { LessonInfoResponse } from '../models';
// @ts-ignore
import type { RecommendVideoFetchResponse } from '../models';
// @ts-ignore
import type { SectionListResponse } from '../models';
// @ts-ignore
import type { VideoSubtitleGet200Response } from '../models';
// @ts-ignore
import type { WordlistFetchInfoResponse } from '../models';
// @ts-ignore
import type { WordlistRandomwordGet200Response } from '../models';
// @ts-ignore
import type { WordlistTranslateGet200Response } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取段落信息
         * @param {number} id 要获取的段落的id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentChapterGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentChapterGet', 'id', id)
            const localVarPath = `/content/chapter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取练习信息
         * @param {number} id 练习的id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentExerciseGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentExerciseGet', 'id', id)
            const localVarPath = `/content/exercise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取课程信息
         * @param {number} id 课程id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentLessonGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentLessonGet', 'id', id)
            const localVarPath = `/content/lesson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取给定语言的所有章节的列表
         * @summary 获取章节列表
         * @param {string} lang 指定语言参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentSectionsGet: async (lang: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lang' is not null or undefined
            assertParamExists('contentSectionsGet', 'lang', lang)
            const localVarPath = `/content/sections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获得推荐视频
         * @param {number} limit 限制此次请求返回的最大视频数量
         * @param {number} [id] 指定一次fetch的id
         * @param {number} [before] 指向最后一条记录的游标
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recommendGetGet: async (limit: number, id?: number, before?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('recommendGetGet', 'limit', limit)
            const localVarPath = `/recommend/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据提供的视频id，提供视频相对应的url
         * @summary 获取视频url
         * @param {number} [id] 对应的视频id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        videoRawGet: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/video/raw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据提供的视频id，提供视频相对应的字幕文件url
         * @summary 获取字幕文件url
         * @param {number} [id] 对应的视频id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        videoSubtitleGet: async (id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/video/subtitle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 添加一个单词到用户的生词本中
         * @summary 创建生词条目
         * @param {string} word 需要添加到单词本中的单词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistAddPost: async (word: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'word' is not null or undefined
            assertParamExists('wordlistAddPost', 'word', word)
            const localVarPath = `/wordlist/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (word !== undefined) {
                localVarQueryParameter['word'] = word;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 从用户的生词本中删除一个条目
         * @summary 删除生词条目
         * @param {string} word 要删除的单词名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistDeletePost: async (word: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'word' is not null or undefined
            assertParamExists('wordlistDeletePost', 'word', word)
            const localVarPath = `/wordlist/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (word !== undefined) {
                localVarQueryParameter['word'] = word;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取生词列表，具体提供单词的顺序由后端确定
         * @summary 获取生词表
         * @param {number} limit 限制最大获取的生词数量
         * @param {string} [before] 获取的最后一个生词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistGetGet: async (limit: number, before?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('wordlistGetGet', 'limit', limit)
            const localVarPath = `/wordlist/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 从陌生的单词表中获取任四个不重复的随机单词
         * @summary 获取四个随机单词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistRandomwordGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wordlist/randomword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取单词翻译
         * @param {string} [name] 名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistTranslateGet: async (name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wordlist/translate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 获取段落信息
         * @param {number} id 要获取的段落的id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentChapterGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChapterInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentChapterGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentChapterGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取练习信息
         * @param {number} id 练习的id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentExerciseGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExerciseInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentExerciseGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentExerciseGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取课程信息
         * @param {number} id 课程id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentLessonGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LessonInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentLessonGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentLessonGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取给定语言的所有章节的列表
         * @summary 获取章节列表
         * @param {string} lang 指定语言参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentSectionsGet(lang: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectionListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentSectionsGet(lang, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentSectionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获得推荐视频
         * @param {number} limit 限制此次请求返回的最大视频数量
         * @param {number} [id] 指定一次fetch的id
         * @param {number} [before] 指向最后一条记录的游标
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recommendGetGet(limit: number, id?: number, before?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecommendVideoFetchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recommendGetGet(limit, id, before, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.recommendGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 根据提供的视频id，提供视频相对应的url
         * @summary 获取视频url
         * @param {number} [id] 对应的视频id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async videoRawGet(id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoSubtitleGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoRawGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.videoRawGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 根据提供的视频id，提供视频相对应的字幕文件url
         * @summary 获取字幕文件url
         * @param {number} [id] 对应的视频id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async videoSubtitleGet(id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoSubtitleGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.videoSubtitleGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.videoSubtitleGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 添加一个单词到用户的生词本中
         * @summary 创建生词条目
         * @param {string} word 需要添加到单词本中的单词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordlistAddPost(word: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wordlistAddPost(word, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.wordlistAddPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 从用户的生词本中删除一个条目
         * @summary 删除生词条目
         * @param {string} word 要删除的单词名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordlistDeletePost(word: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wordlistDeletePost(word, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.wordlistDeletePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取生词列表，具体提供单词的顺序由后端确定
         * @summary 获取生词表
         * @param {number} limit 限制最大获取的生词数量
         * @param {string} [before] 获取的最后一个生词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordlistGetGet(limit: number, before?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WordlistFetchInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wordlistGetGet(limit, before, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.wordlistGetGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 从陌生的单词表中获取任四个不重复的随机单词
         * @summary 获取四个随机单词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordlistRandomwordGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WordlistRandomwordGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wordlistRandomwordGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.wordlistRandomwordGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取单词翻译
         * @param {string} [name] 名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wordlistTranslateGet(name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WordlistTranslateGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wordlistTranslateGet(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.wordlistTranslateGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary 获取段落信息
         * @param {number} id 要获取的段落的id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentChapterGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ChapterInfoResponse> {
            return localVarFp.contentChapterGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取练习信息
         * @param {number} id 练习的id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentExerciseGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ExerciseInfoResponse> {
            return localVarFp.contentExerciseGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取课程信息
         * @param {number} id 课程id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentLessonGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<LessonInfoResponse> {
            return localVarFp.contentLessonGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取给定语言的所有章节的列表
         * @summary 获取章节列表
         * @param {string} lang 指定语言参数
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentSectionsGet(lang: string, options?: RawAxiosRequestConfig): AxiosPromise<SectionListResponse> {
            return localVarFp.contentSectionsGet(lang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获得推荐视频
         * @param {number} limit 限制此次请求返回的最大视频数量
         * @param {number} [id] 指定一次fetch的id
         * @param {number} [before] 指向最后一条记录的游标
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recommendGetGet(limit: number, id?: number, before?: number, options?: RawAxiosRequestConfig): AxiosPromise<RecommendVideoFetchResponse> {
            return localVarFp.recommendGetGet(limit, id, before, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据提供的视频id，提供视频相对应的url
         * @summary 获取视频url
         * @param {number} [id] 对应的视频id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        videoRawGet(id?: number, options?: RawAxiosRequestConfig): AxiosPromise<VideoSubtitleGet200Response> {
            return localVarFp.videoRawGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据提供的视频id，提供视频相对应的字幕文件url
         * @summary 获取字幕文件url
         * @param {number} [id] 对应的视频id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        videoSubtitleGet(id?: number, options?: RawAxiosRequestConfig): AxiosPromise<VideoSubtitleGet200Response> {
            return localVarFp.videoSubtitleGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 添加一个单词到用户的生词本中
         * @summary 创建生词条目
         * @param {string} word 需要添加到单词本中的单词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistAddPost(word: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.wordlistAddPost(word, options).then((request) => request(axios, basePath));
        },
        /**
         * 从用户的生词本中删除一个条目
         * @summary 删除生词条目
         * @param {string} word 要删除的单词名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistDeletePost(word: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.wordlistDeletePost(word, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取生词列表，具体提供单词的顺序由后端确定
         * @summary 获取生词表
         * @param {number} limit 限制最大获取的生词数量
         * @param {string} [before] 获取的最后一个生词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistGetGet(limit: number, before?: string, options?: RawAxiosRequestConfig): AxiosPromise<WordlistFetchInfoResponse> {
            return localVarFp.wordlistGetGet(limit, before, options).then((request) => request(axios, basePath));
        },
        /**
         * 从陌生的单词表中获取任四个不重复的随机单词
         * @summary 获取四个随机单词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistRandomwordGet(options?: RawAxiosRequestConfig): AxiosPromise<WordlistRandomwordGet200Response> {
            return localVarFp.wordlistRandomwordGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取单词翻译
         * @param {string} [name] 名称
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wordlistTranslateGet(name?: string, options?: RawAxiosRequestConfig): AxiosPromise<WordlistTranslateGet200Response> {
            return localVarFp.wordlistTranslateGet(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 获取段落信息
     * @param {number} id 要获取的段落的id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentChapterGet(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentChapterGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取练习信息
     * @param {number} id 练习的id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentExerciseGet(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentExerciseGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取课程信息
     * @param {number} id 课程id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentLessonGet(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentLessonGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取给定语言的所有章节的列表
     * @summary 获取章节列表
     * @param {string} lang 指定语言参数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentSectionsGet(lang: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentSectionsGet(lang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获得推荐视频
     * @param {number} limit 限制此次请求返回的最大视频数量
     * @param {number} [id] 指定一次fetch的id
     * @param {number} [before] 指向最后一条记录的游标
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public recommendGetGet(limit: number, id?: number, before?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).recommendGetGet(limit, id, before, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据提供的视频id，提供视频相对应的url
     * @summary 获取视频url
     * @param {number} [id] 对应的视频id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public videoRawGet(id?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).videoRawGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据提供的视频id，提供视频相对应的字幕文件url
     * @summary 获取字幕文件url
     * @param {number} [id] 对应的视频id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public videoSubtitleGet(id?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).videoSubtitleGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 添加一个单词到用户的生词本中
     * @summary 创建生词条目
     * @param {string} word 需要添加到单词本中的单词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public wordlistAddPost(word: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).wordlistAddPost(word, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 从用户的生词本中删除一个条目
     * @summary 删除生词条目
     * @param {string} word 要删除的单词名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public wordlistDeletePost(word: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).wordlistDeletePost(word, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取生词列表，具体提供单词的顺序由后端确定
     * @summary 获取生词表
     * @param {number} limit 限制最大获取的生词数量
     * @param {string} [before] 获取的最后一个生词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public wordlistGetGet(limit: number, before?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).wordlistGetGet(limit, before, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 从陌生的单词表中获取任四个不重复的随机单词
     * @summary 获取四个随机单词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public wordlistRandomwordGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).wordlistRandomwordGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取单词翻译
     * @param {string} [name] 名称
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public wordlistTranslateGet(name?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).wordlistTranslateGet(name, options).then((request) => request(this.axios, this.basePath));
    }
}

